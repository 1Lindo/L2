package main

import (
	"fmt"
	"math/rand"
	"time"
)

func asChan(vs ...int) <-chan int {
	c := make(chan int)

	go func() {
		defer close(c)
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
	}()
	return c
}

func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v := <-a:
				c <- v
			case v := <-b:
				c <- v
				//case v, ok := <-a:
				//	if !ok {
				//		b = nil
				//	} else {
				//		c <- v
				//	}
				//case v, ok := <-b:
				//	if !ok {
				//		b = nil
				//	} else {
				//		c <- v
				//	}

			}
			//if a == nil && b == nil {
			//	close(c) // Завершить работу, если оба канала закрыты
			//}
		}
	}()
	return c
}

func main() {

	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Println(v)
	}
}

/*

Инициализируются два канала (a и b) с помощью функции asChan и заполняются значениями с помощью горутины.
Затем ф-я merge объединяет значения из этих каналов в один канал "c" через горутины.
Далее значения из канала "c" выводятся на экран в главной функции.

Поскольку значения отправляются в каналы асинхронно, порядок вывода может меняться при каждом запуске программы.
Значения в выводе будут случайными, так как между отправкой значений в каналы происходит случайная задержка (time.Sleep).

* Когда выведутся все значения появится бесконечный поток нулей.
Поскольку каналы a и b не закрываются, программа продолжает ждать новых значений и выводит бесконечный поток нулей.

Решить проблему позволит закомментированный код, он проверит если ли значения в каналах и если их нет закроет их.
*/
